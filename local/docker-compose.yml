# Fixed version of your docker-compose.yml with Spark improvements

services:
  # PostgreSQL - Database for Dagster metadata
  postgres:
    image: postgres:15
    container_name: ecommerce-postgres
    environment:
      POSTGRES_DB: dagster
      POSTGRES_USER: dagster
      POSTGRES_PASSWORD: dagster
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dagster"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ecommerce-network

  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: ecommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_DATA_DIR: /var/lib/zookeeper/data
      ZOOKEEPER_DATA_LOG_DIR: /var/lib/zookeeper/log
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    user: "0:0"
    networks:
      - ecommerce-network

  # Kafka - Message streaming platform
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: ecommerce-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - ecommerce-network

  # Schema Registry - Kafka schema management
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: ecommerce-schema-registry
    depends_on:
      - kafka
    ports:
      - "8083:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8083
    networks:
      - ecommerce-network

  # Kafka UI - Web interface for Kafka management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ecommerce-kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8083
    networks:
      - ecommerce-network

  # MinIO - S3-compatible object storage
  minio:
    image: minio/minio:latest
    container_name: ecommerce-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ecommerce-network

  # MinIO Client - Initialize buckets
  minio-init:
    image: minio/mc:latest
    container_name: ecommerce-minio-init
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10;
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/bronze-data --ignore-existing;
      /usr/bin/mc mb myminio/silver-data --ignore-existing;
      /usr/bin/mc mb myminio/gold-data --ignore-existing;
      /usr/bin/mc mb myminio/logs-data --ignore-existing;
      /usr/bin/mc mb myminio/scripts-data --ignore-existing;
      /usr/bin/mc mb myminio/checkpoint-data --ignore-existing;
      echo 'MinIO buckets created successfully';
      exit 0;
      "
    networks:
      - ecommerce-network

  # Spark Master - FIXED VERSION
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: ecommerce-spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_MASTER_HOST=spark-master
      - SPARK_MASTER_PORT_NUMBER=7077
      - SPARK_MASTER_WEBUI_PORT=8080
      # Additional environment variables for better stability
      - JAVA_HOME=/opt/bitnami/java
      - SPARK_HOME=/opt/bitnami/spark
    ports:
      - "7080:8080"  # Spark Master UI
      - "7077:7077"  # Spark Master port
    volumes:
      - ./jars:/opt/bitnami/spark/jars-extra:rw
      - ./streaming:/opt/bitnami/spark/work-dir:rw
      - ./data:/opt/bitnami/spark/data:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"] 
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  # Spark Worker - FIXED VERSION
  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: ecommerce-spark-worker
    depends_on:
      spark-master:
        condition: service_healthy
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_WORKER_WEBUI_PORT=8081
      # Additional environment variables
      - JAVA_HOME=/opt/bitnami/java
      - SPARK_HOME=/opt/bitnami/spark
    ports:
      - "8081:8081"  # Worker UI
    volumes:
      - ./jars:/opt/bitnami/spark/jars-extra:rw
      - ./streaming:/opt/bitnami/spark/work-dir:rw
      - ./data:/opt/bitnami/spark/data:rw
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - ecommerce-network

  # Optional: Spark History Server for job monitoring
  spark-history:
    image: bitnami/spark:3.5.0
    container_name: ecommerce-spark-history
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=history
      - SPARK_HISTORY_UI_PORT=18080
      - SPARK_HISTORY_FS_LOG_DIRECTORY=/opt/bitnami/spark/logs
    ports:
      - "18080:18080"
    volumes:
      - ./spark-logs:/opt/bitnami/spark/logs:rw
    networks:
      - ecommerce-network

  # Dagster Daemon - Orchestration daemon
  dagster-daemon:
    build: 
      context: .
      dockerfile: Dockerfile.dagster
    container_name: ecommerce-dagster-daemon
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DAGSTER_POSTGRES_USER: dagster
      DAGSTER_POSTGRES_PASSWORD: dagster
      DAGSTER_POSTGRES_DB: dagster
      DAGSTER_POSTGRES_HOST: postgres
      DAGSTER_POSTGRES_PORT: 5432
      DAGSTER_POSTGRES_URL: postgresql://dagster:dagster@postgres:5432/dagster
      DAGSTER_HOME: /opt/dagster/dagster_home
    volumes:
      - ../dagster/dagster_project:/opt/dagster/app
      - ./dagster/dagster_home:/opt/dagster/dagster_home
      - ./data:/opt/dagster/data
    command: ["dagster-daemon", "run", "-w", "/opt/dagster/dagster_home/workspace.yaml"]
    networks:
      - ecommerce-network

  # Dagster Webserver - Web UI
  dagster-webserver:
    build: 
      context: .
      dockerfile: Dockerfile.dagster
    container_name: ecommerce-dagster-webserver
    depends_on:
      postgres:
        condition: service_healthy
      dagster-daemon:
        condition: service_started
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: dagster
      DAGSTER_POSTGRES_PASSWORD: dagster
      DAGSTER_POSTGRES_DB: dagster
      DAGSTER_POSTGRES_HOST: postgres
      DAGSTER_POSTGRES_PORT: 5432
      DAGSTER_POSTGRES_URL: postgresql://dagster:dagster@postgres:5432/dagster
      DAGSTER_HOME: /opt/dagster/dagster_home
    volumes:
      - ../dagster/dagster_project:/opt/dagster/app
      - ./dagster/dagster_home:/opt/dagster/dagster_home
      - ./data:/opt/dagster/data
    command: ["dagster-webserver", "-h", "0.0.0.0", "-p", "3000", "-w", "/opt/dagster/dagster_home/workspace.yaml"]
    networks:
      - ecommerce-network

  # Jupyter Notebook - Data exploration
  jupyter:
    image: jupyter/pyspark-notebook:latest
    container_name: ecommerce-jupyter
    depends_on:
      - spark-master
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: "ecommerce-analytics"
      # Spark configuration for Jupyter
      SPARK_MASTER: "spark://spark-master:7077"
      SPARK_DRIVER_HOST: "jupyter"
      SPARK_DRIVER_PORT: "7001"
      SPARK_DRIVER_BLOCK_MANAGER_PORT: "7002"
    volumes:
      - ./notebooks:/home/jovyan/work
      - ./data:/home/jovyan/data
      - ./requirements.txt:/tmp/requirements.txt
    command: >
      bash -c "
      pip install -r /tmp/requirements.txt &&
      start-notebook.py --NotebookApp.token='ecommerce-analytics' --NotebookApp.password='' --ip=0.0.0.0
      "
    networks:
      - ecommerce-network

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ecommerce-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecommerce-network

  # Grafana - Monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ecommerce-grafana
    depends_on:
      - prometheus
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - ecommerce-network

volumes:
  postgres_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  ecommerce-network:
    driver: bridge
    name: ecommerce-analytics-network