# docker-compose.yml

version: '3.8'

services:
  # Kafka and Zookeeper for local development
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data

  # Schema Registry for Kafka
  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  # MinIO for local S3-compatible storage
  minio:
    image: minio/minio:latest
    hostname: minio
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Create MinIO bucket
  minio-create-bucket:
    image: minio/mc:latest
    container_name: minio-create-bucket
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin) do echo 'Waiting for MinIO...' && sleep 1; done;
      /usr/bin/mc mb myminio/ecommerce-data-lake;
      /usr/bin/mc mb myminio/checkpoints;
      /usr/bin/mc mb myminio/logs;
      /usr/bin/mc mb myminio/scripts;
      exit 0;
      "

  # Spark Master
  spark-master:
    image: bitnami/spark:3.5.0
    hostname: spark-master
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8080:8080"
      - "7077:7077"
    volumes:
      - ./streaming:/opt/spark-apps
      - ./jars:/opt/spark/jars/custom
    command: >
      bash -c "
      # Download required JARs
      wget -O /opt/spark/jars/custom/kafka-clients-3.5.0.jar https://repo1.maven.org/maven2/org/apache/kafka/kafka-clients/3.5.0/kafka-clients-3.5.0.jar
      wget -O /opt/spark/jars/custom/spark-sql-kafka-0-10_2.12-3.5.0.jar https://repo1.maven.org/maven2/org/apache/spark/spark-sql-kafka-0-10_2.12/3.5.0/spark-sql-kafka-0-10_2.12-3.5.0.jar
      wget -O /opt/spark/jars/custom/iceberg-spark-runtime-3.5_2.12-1.4.2.jar https://repo1.maven.org/maven2/org/apache/iceberg/iceberg-spark-runtime-3.5_2.12/1.4.2/iceberg-spark-runtime-3.5_2.12-1.4.2.jar
      wget -O /opt/spark/jars/custom/hadoop-aws-3.3.4.jar https://repo1.maven.org/maven2/org/apache/hadoop/hadoop-aws/3.3.4/hadoop-aws-3.3.4.jar
      wget -O /opt/spark/jars/custom/aws-java-sdk-bundle-1.12.565.jar https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-bundle/1.12.565/aws-java-sdk-bundle-1.12.565.jar
      
      /opt/bitnami/scripts/spark/entrypoint.sh /opt/bitnami/scripts/spark/run.sh
      "

  # Spark Worker
  spark-worker:
    image: bitnami/spark:3.5.0
    hostname: spark-worker
    container_name: spark-worker
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "8081:8081"
    volumes:
      - ./streaming:/opt/spark-apps
      - ./jars:/opt/spark/jars/custom

  # Jupyter Notebook for exploration
  jupyter:
    image: jupyter/pyspark-notebook:spark-3.5.0
    hostname: jupyter
    container_name: jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=ecommerce-analytics
    volumes:
      - ./analytics/notebooks:/home/jovyan/work
      - ./data-generation:/home/jovyan/data-generation
      - ./streaming:/home/jovyan/streaming
    command: >
      bash -c "
      pip install kafka-python faker boto3 minio
      start-notebook.sh --NotebookApp.token='ecommerce-analytics'
      "

  # Dagster for orchestration
  dagster-daemon:
    image: dagster/dagster-celery-docker:1.5.12
    hostname: dagster-daemon
    container_name: dagster-daemon
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
      DAGSTER_POSTGRES_DB: dagster_db
      DAGSTER_POSTGRES_HOSTNAME: postgres
      DAGSTER_POSTGRES_USER: dagster_user
      DAGSTER_POSTGRES_PASSWORD: dagster_password
    volumes:
      - ./dagster:/opt/dagster/dagster_home
      - dagster-storage:/opt/dagster/dagster_home/storage
    depends_on:
      - postgres
    command: ["dagster-daemon", "run"]

  dagster-webserver:
    image: dagster/dagster-celery-docker:1.5.12
    hostname: dagster-webserver
    container_name: dagster-webserver
    ports:
      - "3000:3000"
    environment:
      DAGSTER_HOME: /opt/dagster/dagster_home
      DAGSTER_POSTGRES_DB: dagster_db
      DAGSTER_POSTGRES_HOSTNAME: postgres
      DAGSTER_POSTGRES_USER: dagster_user
      DAGSTER_POSTGRES_PASSWORD: dagster_password
    volumes:
      - ./dagster:/opt/dagster/dagster_home
      - dagster-storage:/opt/dagster/dagster_home/storage
    depends_on:
      - postgres
      - dagster-daemon
    command: ["dagster-webserver", "-h", "0.0.0.0", "-p", "3000"]

  # PostgreSQL for Dagster metadata
  postgres:
    image: postgres:15
    hostname: postgres
    container_name: postgres
    environment:
      POSTGRES_DB: dagster_db
      POSTGRES_USER: dagster_user
      POSTGRES_PASSWORD: dagster_password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:10.2.0
    hostname: grafana
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.48.0
    hostname: prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  # Kafka UI for monitoring Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  minio-data:
  postgres-data:
  grafana-data:
  prometheus-data:
  dagster-storage:

networks:
  default:
    name: ecommerce-analytics-network